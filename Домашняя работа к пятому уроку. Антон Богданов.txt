public class MainClass {
    private static final int CARS_COUNT = 4;

    public static void main(String[] args) {
        CountDownLatch latch = new CountDownLatch(CARS_COUNT);
        CyclicBarrier barrier = new CyclicBarrier(CARS_COUNT + 1);

        System.out.println("ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Подготовка!!!");
        Race race = new Race(new Road(60), new Tunnel(CARS_COUNT / 2), new Road(40));
        Car[] cars = new Car[CARS_COUNT];
        for (int i = 0; i < cars.length; i++) {
            cars[i] = new Car(latch, barrier, race, 20 + (int) (Math.random() * 10));
        }
        for (Car car : cars) {
            new Thread(car).start();
        }
        try {
            latch.await();
            System.out.println("ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Гонка началась!!!");
            barrier.await();
        } catch (InterruptedException | BrokenBarrierException e) {
            e.printStackTrace();
        }
        try {
            barrier.await();
            System.out.println("ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Гонка закончилась!!!");
        } catch (InterruptedException | BrokenBarrierException e) {
            e.printStackTrace();
        }
    }

}

public class Tunnel extends Stage {
    private Semaphore smp;

    public Tunnel(int maxCarCount) {
        length = 80;
        description = "Тоннель " + length + " метров";
        smp = new Semaphore(maxCarCount);
    }

    @Override
    public void go(Car car) {
        try {
            System.out.println(car.getName() + " готовится к этапу(ждет): " + description);
            smp.acquire();
            System.out.println(car.getName() + " начал этап: " + description);
            Thread.sleep(length / car.getSpeed() * 1000);
            System.out.println(car.getName() + " закончил этап: " + description);
        } catch (InterruptedException e) {
            e.printStackTrace();
        } finally {
            smp.release();
        }
    }

}

public class Car implements Runnable {
    private static int CARS_COUNT;
    private static ReentrantLock lock;

    static {
        CARS_COUNT = 0;
        lock = new ReentrantLock();
    }

    private CountDownLatch readyForRacing;
    private CyclicBarrier barrier;
    private Race race;
    private int speed;
    private String name;

    public Car(CountDownLatch latch, CyclicBarrier barrier, Race race, int speed) {
        readyForRacing = latch;
        this.barrier = barrier;
        this.race = race;
        this.speed = speed;
        CARS_COUNT++;
        name = "Участник №" + CARS_COUNT;
    }

    public int getSpeed() {
        return speed;
    }

    public String getName() {
        return name;
    }

    @Override
    public void run() {
        try {
            System.out.println(name + " готовится");
            Thread.sleep(500 + (int) (Math.random() * 800));
            System.out.println(name + " готов");
            readyForRacing.countDown();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        try {
            barrier.await();
            for (int i = 0; i < race.getStages().size(); i++) {
                race.getStages().get(i).go(this);
            }
            if (lock.tryLock()) {
                System.out.println(name + " - WIN!");
                barrier.await();
                lock.unlock();
            } else {
                barrier.await();
            }
        } catch (InterruptedException | BrokenBarrierException e) {
            e.printStackTrace();
        }
    }

}